# -*- coding: utf-8 -*-
"""Dashboard Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mhYyAU3Kw9wKr9lOShfy2GJN1PSO_ZnB

Internal dashboard
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import ast
import re

from sklearn.metrics.pairwise import cosine_similarity

# Loading the final data with embeddings
df = pd.read_pickle("activities_with_embeddings.pkl")

# -- Clean up age_group field
def simplify_age(age):
    if pd.isna(age):
        return "No specific category"
    match = re.search(r"\d+", str(age))
    return match.group() + "+" if match else "No specific category"

df["age_group"] = df["age_group"].apply(simplify_age)

# Get full chapter titles from first few lines in the chapter_summary field
def extract_title_from_summary(summary):
    if isinstance(summary, str):
        match = re.search(r"CHAPTER\s+\d+\s*:\s*(.+?)(\.\s|$)", summary, flags=re.IGNORECASE)
        if match:
            return match.group(1).strip()
    return ""

# Try extracting chapter names from the summary field
chapter_titles = {}
for chapter in df["chapter"].dropna().unique():
    chapter_summary = df[df["chapter"] == chapter]["chapter_summary"].dropna().values
    if chapter_summary.size > 0:
        extracted_title = extract_title_from_summary(chapter_summary[0])
        if extracted_title:
            chapter_titles[chapter] = f"{chapter}: {extracted_title}"
        else:
            chapter_titles[chapter] = chapter  # fallback
    else:
        chapter_titles[chapter] = chapter


# -- Convert instruction strings that look like lists into bullet points
def format_instructions(instr):
    if isinstance(instr, str):
        try:
            parsed = ast.literal_eval(instr)
            if isinstance(parsed, list):
                return "\n".join([f"- {line}" for line in parsed])
        except:
            pass
    return instr

df["instructions"] = df["instructions"].apply(format_instructions)

# Convert string tags to list
df["pyari_curriculum_tags"] = df["pyari_curriculum_tags"].fillna("").apply(lambda x: [tag.strip() for tag in x.split(",") if tag])

# Sidebar filters
st.sidebar.title("🔍 Filter Activities")
selected_age = st.sidebar.multiselect("Age Group", options=df["age_group"].unique())
selected_tags = st.sidebar.multiselect("Pyari Tags", options=sorted({tag for sublist in df["pyari_curriculum_tags"] for tag in sublist}))

# Keyword search
search_query = st.sidebar.text_input("Search by keyword")

# Filtered data
filtered_df = df.copy()

if selected_age:
    filtered_df = filtered_df[filtered_df["age_group"].isin(selected_age)]

if selected_tags:
    filtered_df = filtered_df[filtered_df["pyari_curriculum_tags"].apply(lambda tags: any(t in tags for t in selected_tags))]

if search_query:
    filtered_df = filtered_df[filtered_df["title"].str.contains(search_query, case=False, na=False) |
                              filtered_df["purpose"].str.contains(search_query, case=False, na=False) |
                              filtered_df["instructions"].str.contains(search_query, case=False, na=False)]

st.title("📘 Pyari Curriculum Activities")

# Get unique chapters
chapters = df["chapter"].dropna().unique()
selected_chapter = st.selectbox("📚 Choose a Chapter", sorted(chapters))

# Filter for the selected chapter
chapter_activities = df[df["chapter"] == selected_chapter]
raw_summary = chapter_activities["chapter_summary"].dropna().unique()

if raw_summary.any():
    chapter_title = chapter_titles[selected_chapter]
    cleaned_summary = clean_chapter_summary(raw_summary[0], chapter_title)

    st.markdown(f"## 📘 {chapter_title}")
    for para in cleaned_summary.split("\n\n"):
        st.markdown(para.strip())

# Show sections in the selected chapter
sections = chapter_activities["section"].dropna().unique()
selected_section = st.selectbox("📂 Choose a Section", sorted(sections))

# Filter to selected section
section_activities = chapter_activities[chapter_activities["section"] == selected_section]

# Display activities in selected section
st.markdown("### 🎯 Activities")

for idx, row in section_activities.iterrows():
    st.subheader(row["title"])
    st.markdown(f"**Purpose:** {row['purpose']}")
    st.markdown(f"**Age Group:** {row['age_group']}")
    st.markdown(f"**Tags:** {', '.join(row['pyari_curriculum_tags']) if isinstance(row['pyari_curriculum_tags'], list) else row['pyari_curriculum_tags']}")
    
    with st.expander("📖 Instructions"):
        st.markdown(row["instructions"])
    
    with st.expander("✨ See similar activities"):
        emb_matrix = np.stack(df["embedding"].values)
        target = np.array(row["embedding"]).reshape(1, -1)
        sims = cosine_similarity(target, emb_matrix)[0]
        top_indices = sims.argsort()[::-1][1:4]
        for i in top_indices:
            sim_row = df.iloc[i]
            st.markdown(f"**→ {sim_row['title']}** — _{sim_row['purpose']}_")