# -*- coding: utf-8 -*-
"""Dashboard Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mhYyAU3Kw9wKr9lOShfy2GJN1PSO_ZnB

Internal dashboard
"""

pip install streamlit
import streamlit as st
import pandas as pd
import numpy as np
import pickle
from sklearn.metrics.pairwise import cosine_similarity

# Loading the final data with embeddings
df = pd.read_pickle("activities_with_embeddings.pkl")

# Convert string tags to list
df["pyari_curriculum_tags"] = df["pyari_curriculum_tags"].fillna("").apply(lambda x: [tag.strip() for tag in x.split(",") if tag])

# Sidebar filters
st.sidebar.title("üîç Filter Activities")
selected_age = st.sidebar.multiselect("Age Group", options=df["age_group"].unique())
selected_tags = st.sidebar.multiselect("Pyari Tags", options=sorted({tag for sublist in df["pyari_curriculum_tags"] for tag in sublist}))

# Keyword search
search_query = st.sidebar.text_input("Search by keyword")

# Filtered data
filtered_df = df.copy()

if selected_age:
    filtered_df = filtered_df[filtered_df["age_group"].isin(selected_age)]

if selected_tags:
    filtered_df = filtered_df[filtered_df["pyari_curriculum_tags"].apply(lambda tags: any(t in tags for t in selected_tags))]

if search_query:
    filtered_df = filtered_df[filtered_df["title"].str.contains(search_query, case=False, na=False) |
                              filtered_df["purpose"].str.contains(search_query, case=False, na=False) |
                              filtered_df["instructions"].str.contains(search_query, case=False, na=False)]

# Show activity list
st.title("üìò Pyari Curriculum Activities")
for idx, row in filtered_df.iterrows():
    st.subheader(row["title"])
    st.markdown(f"**Purpose:** {row['purpose']}")
    st.markdown(f"**Age Group:** {row['age_group']}")
    st.markdown(f"**Tags:** {', '.join(row['pyari_curriculum_tags'])}")
    with st.expander("üìñ Instructions"):
        st.markdown(row["instructions"])
    with st.expander("‚ú® See similar activities"):
        emb_matrix = np.stack(df["embedding"].values)
        target = np.array(row["embedding"]).reshape(1, -1)
        sims = cosine_similarity(target, emb_matrix)[0]
        top_indices = sims.argsort()[::-1][1:4]
        for i in top_indices:
            sim_row = df.iloc[i]
            st.markdown(f"**‚Üí {sim_row['title']}** ‚Äî _{sim_row['purpose']}_")
