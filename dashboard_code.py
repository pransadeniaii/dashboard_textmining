# -*- coding: utf-8 -*-
"""Dashboard Code

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1mhYyAU3Kw9wKr9lOShfy2GJN1PSO_ZnB

Internal dashboard
"""

import streamlit as st
import pandas as pd
import numpy as np
import pickle
import ast
import re

from sklearn.metrics.pairwise import cosine_similarity

# Loading the final data with embeddings
df = pd.read_pickle("activities_with_embeddings.pkl")

# -- Clean up age_group field
def simplify_age(age):
    if pd.isna(age):
        return "No specific category"
    match = re.search(r"\d+", str(age))
    return match.group() + "+" if match else "No specific category"

df["age_group"] = df["age_group"].apply(simplify_age)

# Cleaning chapter summary
def clean_chapter_summary(text):
    if not isinstance(text, str):
        return ""

    # Remove leading page numbers + "CHAPTER X"
    text = re.sub(r"^\d+\\s+CHAPTER\\s+\\d+\\s+[^\n]+", "", text, flags=re.IGNORECASE)

    # Remove trailing boilerplate like "Chapter summary"
    splitters = ["Chapter summary", "chapter summary", "Creating safer", "‚ÄØspaces", "Chapter\\s+\\d+"]
    for marker in splitters:
        parts = re.split(marker, text)
        if len(parts) > 1:
            text = parts[0]
            break

    # Replace double newlines or awkward line breaks with paragraph spacing
    text = re.sub(r"(\\n\\s*){2,}", "\n\n", text)  # normalize breaks
    return text.strip()

# -- Convert instruction strings that look like lists into bullet points
def format_instructions(instr):
    if isinstance(instr, str):
        try:
            parsed = ast.literal_eval(instr)
            if isinstance(parsed, list):
                return "\n".join([f"- {line}" for line in parsed])
        except:
            pass
    return instr

df["instructions"] = df["instructions"].apply(format_instructions)

# Convert string tags to list
df["pyari_curriculum_tags"] = df["pyari_curriculum_tags"].fillna("").apply(lambda x: [tag.strip() for tag in x.split(",") if tag])

# Sidebar filters
st.sidebar.title("üîç Filter Activities")
selected_age = st.sidebar.multiselect("Age Group", options=df["age_group"].unique())
selected_tags = st.sidebar.multiselect("Pyari Tags", options=sorted({tag for sublist in df["pyari_curriculum_tags"] for tag in sublist}))

# Keyword search
search_query = st.sidebar.text_input("Search by keyword")

# Filtered data
filtered_df = df.copy()

if selected_age:
    filtered_df = filtered_df[filtered_df["age_group"].isin(selected_age)]

if selected_tags:
    filtered_df = filtered_df[filtered_df["pyari_curriculum_tags"].apply(lambda tags: any(t in tags for t in selected_tags))]

if search_query:
    filtered_df = filtered_df[filtered_df["title"].str.contains(search_query, case=False, na=False) |
                              filtered_df["purpose"].str.contains(search_query, case=False, na=False) |
                              filtered_df["instructions"].str.contains(search_query, case=False, na=False)]

st.title("üìò Pyari Curriculum Activities")

# Get unique chapters
chapters = df["chapter"].dropna().unique()
selected_chapter = st.selectbox("üìö Choose a Chapter", sorted(chapters))

# Show chapter summary
chapter_activities = df[df["chapter"] == selected_chapter]
chapter_summary = chapter_activities["chapter_summary"].dropna().unique()
if chapter_summary.any():
    st.markdown("### ‚ú® Chapter Summary")
    for para in chapter_summary[0].split("\n\n"):
    st.markdown(para.strip())

# Show sections in the selected chapter
sections = chapter_activities["section"].dropna().unique()
selected_section = st.selectbox("üìÇ Choose a Section", sorted(sections))

# Filter to selected section
section_activities = chapter_activities[chapter_activities["section"] == selected_section]

# Display activities in selected section
st.markdown("### üéØ Activities")

for idx, row in section_activities.iterrows():
    st.subheader(row["title"])
    st.markdown(f"**Purpose:** {row['purpose']}")
    st.markdown(f"**Age Group:** {row['age_group']}")
    st.markdown(f"**Tags:** {', '.join(row['pyari_curriculum_tags']) if isinstance(row['pyari_curriculum_tags'], list) else row['pyari_curriculum_tags']}")
    
    with st.expander("üìñ Instructions"):
        st.markdown(row["instructions"])
    
    with st.expander("‚ú® See similar activities"):
        emb_matrix = np.stack(df["embedding"].values)
        target = np.array(row["embedding"]).reshape(1, -1)
        sims = cosine_similarity(target, emb_matrix)[0]
        top_indices = sims.argsort()[::-1][1:4]
        for i in top_indices:
            sim_row = df.iloc[i]
            st.markdown(f"**‚Üí {sim_row['title']}** ‚Äî _{sim_row['purpose']}_")